# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from operator import truediv
import random
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import*
from PyQt5.QtGui import*
from PyQt5.QtWidgets import*
import sys
import math

class Ui_Elgamal_demo(object):
    def setupUi(self, Elgamal_demo):
        #tạo biến
        self.Y=''
        self.p,self.y1,self.a,self.Alpha,self.Beta, self.k=1,1,1,1,1,1
        self.prime= [x for x in range(8*(10**3),9*(10**3)) if self.checkPrime(x)]
        self.toAnphabet = '=#!$%&(),*+-.0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\/]^_`abcdefghijklmnopqrstuvwxyz{|}~ «»¿£¥±×'
        self.fromAnphabet = dict(zip(self.toAnphabet,range(0,100)))

        Elgamal_demo.setObjectName("Elgamal_demo")
        Elgamal_demo.resize(1087, 559)
       # Elgamal_demo.setStyleSheet("background-color:rgb(232, 232, 232)")
        Elgamal_demo.setStyleSheet("background-color:rgb(219, 244, 255)")
        self.centralwidget = QtWidgets.QWidget(Elgamal_demo)
        self.centralwidget.setObjectName("centralwidget")

        # self.btnGenKey = QtWidgets.QPushButton(self.centralwidget)
        # self.btnGenKey.setGeometry(QtCore.QRect(30, 40, 271, 81))

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(170, 10, 55, 20))
        self.label.setAutoFillBackground(False)
        # self.label.setStyleSheet("Text-color:rgb(85, 170, 0)")
        self.label.setScaledContents(False)
        self.label.setObjectName("label")

        self.Alpha_txt = QtWidgets.QTextEdit(self.centralwidget)
        self.Alpha_txt.setGeometry(QtCore.QRect(140, 30, 104, 31))
        self.Alpha_txt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.Alpha_txt.setObjectName("Alpha_txt")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(290, 10, 55, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(410, 10, 55, 16))
        self.label_3.setObjectName("label_3")

        self.Beta_txt = QtWidgets.QTextEdit(self.centralwidget)
        self.Beta_txt.setGeometry(QtCore.QRect(250, 30, 104, 31))
        self.Beta_txt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.Beta_txt.setObjectName("Beta_txt")

        self.P_txt = QtWidgets.QTextEdit(self.centralwidget)
        self.P_txt.setGeometry(QtCore.QRect(360, 30, 104, 31))
        self.P_txt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.P_txt.setObjectName("P_txt")

        self.in_encrypt = QtWidgets.QTextEdit(self.centralwidget)
        self.in_encrypt.setGeometry(QtCore.QRect(20, 90, 421, 121))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.in_encrypt.setLocale(QtCore.QLocale(QtCore.QLocale.Language.Vietnamese,QtCore.QLocale.Country.Vietnam))
        font.setPointSize(10)
        self.in_encrypt.setFont(font)
        self.in_encrypt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.in_encrypt.setObjectName("in_encrypt")

        self.out_encrypt = QtWidgets.QTextEdit(self.centralwidget)
        self.out_encrypt.setGeometry(QtCore.QRect(20, 310, 421, 121))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.out_encrypt.setLocale(QtCore.QLocale(QtCore.QLocale.Language.Vietnamese,QtCore.QLocale.Country.Vietnam))
        font.setPointSize(10)
        self.out_encrypt.setFont(font)
        self.out_encrypt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.out_encrypt.setObjectName("out_encrypt")

        self.btnEncrypt = QtWidgets.QPushButton(self.centralwidget)
        self.btnEncrypt.setGeometry(QtCore.QRect(160, 240, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnEncrypt.setFont(font)
        self.btnEncrypt.setStyleSheet("color:rgb(170, 0, 0)")
        self.btnEncrypt.setObjectName("btnEncrypt")

        self.in_decrypt = QtWidgets.QTextEdit(self.centralwidget)
        self.in_decrypt.setGeometry(QtCore.QRect(600, 90, 421, 121))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.in_decrypt.setLocale(QtCore.QLocale(QtCore.QLocale.Language.Vietnamese,QtCore.QLocale.Country.Vietnam))
        font.setPointSize(10)
        self.in_decrypt.setFont(font)
        self.in_decrypt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.in_decrypt.setObjectName("in_decrypt")

        self.out_decrypt = QtWidgets.QTextEdit(self.centralwidget)
        self.out_decrypt.setGeometry(QtCore.QRect(600, 310, 421, 131))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.out_decrypt.setLocale(QtCore.QLocale(QtCore.QLocale.Language.Vietnamese,QtCore.QLocale.Country.Vietnam))
        font.setPointSize(10)
        self.out_decrypt.setFont(font)
        self.out_decrypt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.out_decrypt.setObjectName("out_decrypt")

        self.btnDecrypt = QtWidgets.QPushButton(self.centralwidget)
        self.btnDecrypt.setGeometry(QtCore.QRect(850, 240, 93, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnDecrypt.setFont(font)
        #self.btnDecrypt.setStyleSheet("color:rgb(85, 170, 0)")
        self.btnDecrypt.setStyleSheet("color:rgb(170, 0, 0)")
        self.btnDecrypt.setObjectName("btnDecrypt")

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(610, 230, 55, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(610, 270, 55, 16))
        self.label_5.setObjectName("label_5")

        self.a_txt = QtWidgets.QTextEdit(self.centralwidget)
        self.a_txt.setGeometry(QtCore.QRect(640, 220, 104, 31))
        self.a_txt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.a_txt.setObjectName("a_txt")
        self.p_txt = QtWidgets.QTextEdit(self.centralwidget)
        self.p_txt.setGeometry(QtCore.QRect(640, 260, 104, 31))
        self.p_txt.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.p_txt.setObjectName("p_txt")

        self.btnSend = QtWidgets.QPushButton(self.centralwidget)
        self.btnSend.setGeometry(QtCore.QRect(230, 460, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnSend.setFont(font)
        #self.btnSend.setStyleSheet("color:rgb(85, 170, 127)")
        self.btnSend.setStyleSheet("color:rgb(42, 85, 0)")
        self.btnSend.setObjectName("btnSend")

        self.btnReceive = QtWidgets.QPushButton(self.centralwidget)
        self.btnReceive.setGeometry(QtCore.QRect(750, 20, 181, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnReceive.setFont(font)
        #self.btnReceive.setStyleSheet("color:rgb(85, 170, 127)")
        self.btnReceive.setStyleSheet("color:rgb(42, 85, 0)")
        self.btnReceive.setObjectName("btnReceive")

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(100, 470, 81, 31))
        self.comboBox.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(650, 30, 91, 31))
        self.comboBox_2.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")

        self.btnClear = QtWidgets.QPushButton(self.centralwidget)
        self.btnClear.setGeometry(QtCore.QRect(470, 120, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnClear.setFont(font)
        self.btnClear.setStyleSheet("color:rgb(170, 0, 0)")
        self.btnClear.setObjectName("btnClear")

        # self.verticalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        # self.verticalScrollBar.setGeometry(QtCore.QRect(430, 90, 16, 121))
        # self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        # self.verticalScrollBar.setObjectName("verticalScrollBar")
        # self.verticalScrollBar_2 = QtWidgets.QScrollBar(self.centralwidget)
        # self.verticalScrollBar_2.setGeometry(QtCore.QRect(430, 310, 16, 121))
        # self.verticalScrollBar_2.setOrientation(QtCore.Qt.Vertical)
        # self.verticalScrollBar_2.setObjectName("verticalScrollBar_2")
        # self.verticalScrollBar_3 = QtWidgets.QScrollBar(self.centralwidget)
        # self.verticalScrollBar_3.setGeometry(QtCore.QRect(1010, 90, 16, 121))
        # self.verticalScrollBar_3.setOrientation(QtCore.Qt.Vertical)
        # self.verticalScrollBar_3.setObjectName("verticalScrollBar_3")
        # self.verticalScrollBar_4 = QtWidgets.QScrollBar(self.centralwidget)
        # self.verticalScrollBar_4.setGeometry(QtCore.QRect(1010, 310, 16, 131))
        # self.verticalScrollBar_4.setOrientation(QtCore.Qt.Vertical)
        # self.verticalScrollBar_4.setObjectName("verticalScrollBar_4")

        self.btnGenKey = QtWidgets.QPushButton(self.centralwidget)
        self.btnGenKey.setGeometry(QtCore.QRect(10, 30, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnGenKey.setFont(font)
        #self.btnGenKey.setStyleSheet("color:rgb(42, 170, 62)")
        self.btnGenKey.setStyleSheet("color:rgb(42, 85, 0)")
        self.btnGenKey.setObjectName("btnGenKey")

        self.btnRand = QtWidgets.QPushButton(self.centralwidget)
        self.btnRand.setGeometry(QtCore.QRect(480, 27, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnRand.setFont(font)
        self.btnRand.setStyleSheet("color:rgb(42, 170, 62)")
        self.btnRand.setStyleSheet("color:rgb(42, 85, 0)")
        self.btnRand.setObjectName("btnRand")

        self.btnClose = QtWidgets.QPushButton(self.centralwidget)
        self.btnClose.setGeometry(QtCore.QRect(980, 10, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnClose.setFont(font)
        self.btnClose.setStyleSheet("color:rgb(170, 0, 0)")
        self.btnClose.setObjectName("btnClose")

        Elgamal_demo.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Elgamal_demo)
        self.statusbar.setObjectName("statusbar")
        Elgamal_demo.setStatusBar(self.statusbar)

        self.retranslateUi(Elgamal_demo)
        QtCore.QMetaObject.connectSlotsByName(Elgamal_demo)

    #event
        self.btnGenKey.clicked.connect(self.genKey)
        self.btnRand.clicked.connect(self.randKey)
        self.btnClose.clicked.connect(self.close)
        self.btnClear.clicked.connect(self.clear)
        self.btnEncrypt.clicked.connect(self.encrypt)
        self.btnSend.clicked.connect(self.send)
        #self.btnSend.clicked.connect(self.receive)
        self.btnDecrypt.clicked.connect(self.decrypt)  

    def retranslateUi(self, Elgamal_demo):
        _translate = QtCore.QCoreApplication.translate
        Elgamal_demo.setWindowTitle(_translate("Elgamal_demo", "Elgamal_demo"))
        self.label.setText(_translate("Elgamal_demo", "<html><head/><body><p><span style=\" color:#55aa00;\">Alpha</span></p></body></html>"))
        self.label_2.setText(_translate("Elgamal_demo", "<html><head/><body><p><span style=\" color:#55aa00;\">Beta</span></p></body></html>"))
        self.label_3.setText(_translate("Elgamal_demo", "<html><head/><body><p><span style=\" color:#55aa00;\">P</span></p></body></html>"))
        self.label_4.setText(_translate("Elgamal_demo", "<html><head/><body><p><span style=\" color:#55aa00;\">a</span></p></body></html>"))
        self.label_5.setText(_translate("Elgamal_demo", "<html><head/><body><p><span style=\" color:#55aa00;\">p</span></p></body></html>"))
#         self.in_encrypt.setHtml(_translate("Elgamal_demo", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
# "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
# "p, li { white-space: pre-wrap; }\n"
# "</style></head><body style=\" font-family:\'Times New Roman\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
# "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'MS Shell Dlg 2\'; font-size:7.8pt;\"><br /></p></body></html>"))
        
        self.btnGenKey.setText(_translate("Elgamal_demo", "Generation key"))
        self.btnRand.setText(_translate("Elgamal_demo", "Random key"))
        self.btnClose.setText(_translate("Elgamal_demo", "Close"))
        self.btnClear.setText(_translate("Elgamal_demo", "Clear"))
        self.btnEncrypt.setText(_translate("Elgamal_demo", "Encrypt"))
        self.btnDecrypt.setText(_translate("Elgamal_demo", "Decrypt"))
        self.btnSend.setText(_translate("Elgamal_demo", "Send Ciphertext"))
        self.btnReceive.setText(_translate("Elgamal_demo", "Receive Ciphertext "))
        
        self.comboBox.setItemText(0, _translate("Elgamal_demo", "COM1"))
        self.comboBox.setItemText(1, _translate("Elgamal_demo", "COM2"))
        self.comboBox_2.setItemText(0, _translate("Elgamal_demo", "COM2"))
        self.comboBox_2.setItemText(1, _translate("Elgamal_demo", "COM1"))

    def convertBaseEncrypt(self,x):
        x2 = x % 100
        x1 = int(x/100)
        if x1 >= 100:
            x1 %= 100
        return self.toAnphabet[x1] + self.toAnphabet[x2]

    def convertBaseDecrypt(self,yy1,yy2):
        xx1 = int(self.fromAnphabet[yy1])
        xx2 = int(self.fromAnphabet[yy2])
        return xx1 * 100 + xx2
    
    def checkPrime(self,x):
        if x==2 or x==3:
            return True
        if x==1 or x % 2 == 0 or x % 3 == 0:
            return False
        
        for i in range(5,int(math.sqrt(x))+1,6):
            if x %i ==0 or x % (i+2) ==0:
                return False
        
        return True
    
    def powMod(self,x,n,m):
        '''
        x^n mod m
        '''
        def ConvertToBinary(n):
            s = ''
            while n >= 1:
                s += chr(ord('0') + n % 2)
                n = int(n/2)
            return s[::-1]
        
        p = 1
        ss = ConvertToBinary(n)
        for s in ss:
            p = (p*p) % m
            if(s== '1'):
                p=(p*x) % m
        return p
    
    def powNegativeOne(self,a,m):
        '''
        a^-1 mod m
        '''
        xa,xm,mm = 1,0,m
        while m != 0:
            q = int (a/m)
            xr = xa -q* xm
            xa = xm
            xm = xr
            r = a % m
            a = m
            m = r
        if xa < 0:
            xa = mm + xa
        return xa

    def calcBeta(self,p, Alpha,a):
        return self.powMod(Alpha,a,p)

    def close(self):
        sys.exit(app.exec_())

    def randKey(self):
        self.p = random.choice(self.prime)
        self.Alpha = random.randint(10,self.p - 5)
        self.a = random.randint(10,self.p - 5)
        self.k = random.randint(10,self.p - 5)
        self.Beta = self.calcBeta(self.p, self.Alpha, self.a)
        self.P_txt.setText(str(self.p))
        self.Alpha_txt.setText(str(self.Alpha))
        self.a_txt.setText(str(self.a))
        self.p_txt.setText(str(self.k))
        self.Beta_txt.setText(str(self.Beta))
        self.in_decrypt.setText('')
        self.out_decrypt.setText('')
        self.out_encrypt.setText('')
    
    def encrypt(self):
        if self.P_txt.toPlainText()=='':
            self.messenger('p')
            return
        pp = int(self.P_txt.toPlainText())
        if not self.checkPrime(pp):
            self.messenger('P')
            return
        self.p = pp

        if self.Alpha_txt.toPlainText()=='':
            self.messenger('Alpha')
            return

        self.Alpha = int(self.Alpha_txt.toPlainText())

        if self.a_txt.toPlainText()== '': 
            self.messenger('a')
            return
        self.a = int(self.a_txt.toPlainText())
        self.Beta = self.calcBeta(self.p, self.Alpha, self.a)
        self.Beta_txt.setText(str(self.Beta))

    #mã hóa
        X_ = self.in_encrypt.toPlainText()
        if X_== '':
            self.messenger("Bản rõ")
            return
        X = [ord(x) for x in X_]

        if(self.p_txt.toPlainText()== ''):
            self.messenger("p")
            return
        self.k = int (self.p_txt.toPlainText())

        yy = self.powMod(self.Beta, self.k, self.p)

        self.y1 = self.powMod(self.Alpha, self.k, self.p)
        y2 = [x*yy % self.p for x in X]
        self.Y =''
        for y in y2:
            self.Y += self.convertBaseEncrypt(y);
        self.out_encrypt.setText(self.Y)
    
    def send(self):
        self.in_decrypt.setText(self.Y)


    def clear(self):
        self.in_decrypt.setText('')
        self.in_encrypt.setText('')
        self.out_decrypt.setText('')
        self.out_encrypt.setText('')
        self.Alpha_txt.setText('')
        self.Beta_txt.setText('')
        self.P_txt.setText('')
        self.a_txt.setText('')
        self.p_txt.setText('')

    #giải mã
    def decrypt(self):
        if self.in_decrypt.toPlainText()=='':
            self.messenger("Bản mã")
            return
        YY = self.in_decrypt.toPlainText()
        listYY = [self.convertBaseDecrypt(YY[i],YY[i+1]) for i in range(0,len(YY),2)]
        res = self.powNegativeOne(self.powMod(self.y1,self.a, self.p),self.p)
        D_Kpir = [(y*res)%self.p for y in listYY]
        ans = ''.join([chr(y) for y in D_Kpir])
        self.out_decrypt.setText(ans)

    #def receive(self):
    #    self.in_decrypt.setText(self.Y)

    def genKey(self):
        if self.P_txt.toPlainText()=='':
            self.messenger('p')
            return
        if not self.checkPrime(int(self.P_txt.toPlainText())):
            self.messenger('P')
            return
        self.p = int(self.P_txt.toPlainText())
        if self.Alpha_txt.toPlainText()=='':
            self.Alpha_txt.setText(str(random.randint(1,self.p-2)))
        if self.a_txt.toPlainText()=='':
            self.a_txt.setText(str(random.randint(1,self.p-2)))
        if self.p_txt.toPlainText()=='':
            self.p_txt.setText(str(random.randint(1,self.p-2)))
        self.Beta_txt.setText(str(self.calcBeta(self.p,int(self.Alpha_txt.toPlainText()), int(self.a_txt.toPlainText()))))

    def messenger(self,x):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        if x=='p':
            msg.setInformativeText("P phải là số nguyên tố")
        else:
            msg.setInformativeText("Không được để trống {}".format(x))
        msg.setWindowTitle("Messenger")
        msg.exec_()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Elgamal_demo = QtWidgets.QMainWindow()
    ui = Ui_Elgamal_demo()
    ui.setupUi(Elgamal_demo)
    Elgamal_demo.show()
    sys.exit(app.exec_())

